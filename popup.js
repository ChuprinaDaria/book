// popup.js - –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö

document.getElementById("start-btn").addEventListener("click", async () => {
  const inputDate = document.getElementById("slot-date").value;

  if (!inputDate) {
    alert("‚õî –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º");
    return;
  }

  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
    chrome.scripting.executeScript({
      target: { tabId: tabs[0].id },
      func: runSlotHunter,
      args: [inputDate]
    });
  });
});

async function runSlotHunter(dateInput) {
  // === –°–ò–°–¢–ï–ú–ê –õ–û–ì–£–í–ê–ù–ù–Ø ===
  const Logger = {
    log: (level, message, data = null) => {
      const timestamp = new Date().toLocaleTimeString('uk-UA');
      const prefix = {
        INFO: 'üìã',
        SUCCESS: '‚úÖ',
        WARNING: '‚ö†Ô∏è',
        ERROR: '‚ùå',
        DEBUG: 'üîç'
      }[level] || 'üìù';
      
      console.log(`${prefix} [${timestamp}] ${message}`);
      if (data) {
        console.log('   üìä –î–∞–Ω—ñ:', data);
      }
    },
    
    info: (msg, data) => Logger.log('INFO', msg, data),
    success: (msg, data) => Logger.log('SUCCESS', msg, data),
    warn: (msg, data) => Logger.log('WARNING', msg, data),
    error: (msg, data) => Logger.log('ERROR', msg, data),
    debug: (msg, data) => Logger.log('DEBUG', msg, data)
  };

  // === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===
  Logger.info(`üöÄ –ó–∞–ø—É—Å–∫ SlotHunter –¥–ª—è –¥–∞—Ç–∏: ${dateInput}`);
  
  const accessToken = Object.values(sessionStorage).find(v => v && v.startsWith && v.startsWith("eyJ"));
  if (!accessToken) {
    Logger.error("–¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ sessionStorage");
    alert("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç—ñ.");
    return;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  try {
    const payload = JSON.parse(atob(accessToken.split('.')[1]));
    const now = Math.floor(Date.now() / 1000);
    const isExpired = payload.exp && payload.exp < now;
    
    Logger.info(`–¢–æ–∫–µ–Ω expires: ${new Date(payload.exp * 1000)}`);
    
    if (isExpired) {
      Logger.error("–¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤!");
      alert("‚ùå –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤! –ü–µ—Ä–µ–ª–æ–≥—ñ–Ω—ñ—Ç—å—Å—è.");
      return;
    }
    
    Logger.success("–¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π");
  } catch (e) {
    Logger.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–æ–∫–µ–Ω", e.message);
  }

  // === –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø ===
  const queueIds = [
    "c93674d6-fb24-4a85-9dac-61897dc8f060",
    "f0992a78-802d-40e7-9bd0-c0d8d46a71fd",
    "3ab99932-8e53-4dff-9abf-45b8c6286a99"
  ];

  // === –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–• –ö–û–†–ò–°–¢–£–í–ê–ß–ê –ó API ===
  const getUserProfile = async () => {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ caseId –∑ URL
      const currentUrl = window.location.href;
      const caseIdMatch = currentUrl.match(/\/cases\/([a-f0-9-]+)/);
      
      if (!caseIdMatch) {
        Logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ case ID –≤ URL");
        return { name: null, lastName: null, dateOfBirth: null };
      }
      
      const caseId = caseIdMatch[1];
      Logger.info(`–ó–Ω–∞–π–¥–µ–Ω–æ case ID: ${caseId}`);
      
      // –Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
      const response = await fetch(`https://inpol.mazowieckie.pl/api/proceedings/${caseId}`, {
        headers: {
          "Authorization": `Bearer ${accessToken}`,
          "Accept": "application/json"
        }
      });
      
      if (!response.ok) {
        Logger.error(`API –∑–∞–ø–∏—Ç –Ω–µ–≤–¥–∞–ª–∏–π: ${response.status} ${response.statusText}`);
        return { name: null, lastName: null, dateOfBirth: null };
      }
      
      const json = await response.json();
      Logger.debug("–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ API:", json);
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–±'—î–∫—Ç, —â–æ –º–∞—î –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const personData = json?.person || json?.applicant || json?.data?.person || json;
      
      const userInfo = {
        name: personData?.firstName,
        lastName: personData?.surname,
        dateOfBirth: personData?.dateOfBirth?.split("T")[0]
      };
      
      Logger.success("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –ü–Ü–ë:", userInfo);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É –¥–ª—è –¥–æ—Å—Ç—É–ø—É
      window.userInfo = userInfo;
      
      return userInfo;
      
    } catch (error) {
      Logger.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API", error.message);
      return { name: null, lastName: null, dateOfBirth: null };
    }
  };

  const userProfile = await getUserProfile();
  
  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  if (!userProfile.name || !userProfile.lastName || !userProfile.dateOfBirth) {
    Logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", userProfile);
    alert("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–ø—Ä–∞–≤–∏.");
    return;
  }
  
  Logger.success("–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ:", userProfile);

  // === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===
  const delay = (ms) => {
    Logger.debug(`–ó–∞—Ç—Ä–∏–º–∫–∞ ${ms}–º—Å`);
    return new Promise(resolve => setTimeout(resolve, ms));
  };

  const waitFor = (conditionFn, timeout = 5000, interval = 100) => {
    return new Promise((resolve, reject) => {
      const start = Date.now();
      const check = () => {
        const result = conditionFn();
        if (result) return resolve(result);
        if (Date.now() - start > timeout) {
          Logger.error(`–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∏—â–∏–ª–æ –ª—ñ–º—ñ—Ç ${timeout}–º—Å`);
          return reject("‚è∞ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∏—â–∏–ª–æ –ª—ñ–º—ñ—Ç");
        }
        setTimeout(check, interval);
      };
      check();
    });
  };

  // === API –§–£–ù–ö–¶–Ü–á ===
  const getSlots = async (queueId, date, retryCount = 0) => {
    const maxRetries = 3;
    const baseDelay = 1000;
    
    Logger.info(`–ó–∞–ø–∏—Ç —Å–ª–æ—Ç—ñ–≤ –¥–ª—è queue: ${queueId.slice(-8)}... –Ω–∞ –¥–∞—Ç—É: ${date}`);
    
    try {
      const requestStart = Date.now();
      
      const res = await fetch(`https://inpol.mazowieckie.pl/api/reservations/queue/${queueId}/${date}/slots`, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          "Accept": "application/json",
          "Origin": "https://inpol.mazowieckie.pl",
          "Referer": "https://inpol.mazowieckie.pl/"
        },
        body: "{}"
      });

      const requestTime = Date.now() - requestStart;
      Logger.debug(`–ß–∞—Å –∑–∞–ø–∏—Ç—É: ${requestTime}–º—Å`);

      const text = await res.text();
      
      if (!res.ok) {
        Logger.error(`HTTP ${res.status} ${res.statusText} –¥–ª—è queue ${queueId.slice(-8)}`, {
          status: res.status,
          response: text.slice(0, 200),
          headers: Object.fromEntries(res.headers.entries())
        });

        if (res.status === 403) {
          if (retryCount < maxRetries) {
            const delayTime = baseDelay * Math.pow(2, retryCount);
            Logger.warn(`403 –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—Ç–æ—Ä ${retryCount + 1}/${maxRetries} —á–µ—Ä–µ–∑ ${delayTime}–º—Å`);
            await delay(delayTime);
            return await getSlots(queueId, date, retryCount + 1);
          } else {
            Logger.error("–í–∏—á–µ—Ä–ø–∞–Ω–æ —Å–ø—Ä–æ–±–∏ –ø—ñ—Å–ª—è 403 –ø–æ–º–∏–ª–æ–∫");
          }
        }
        
        return null;
      }

      try {
        const data = JSON.parse(text);
        
        if (Array.isArray(data)) {
          Logger.success(`–û—Ç—Ä–∏–º–∞–Ω–æ ${data.length} —Å–ª–æ—Ç—ñ–≤ –¥–ª—è queue ${queueId.slice(-8)}`);
          if (data.length > 0) {
            Logger.info("–ü—Ä–∏–∫–ª–∞–¥ —Å–ª–æ—Ç—ñ–≤:", data.slice(0, 3).map(s => `${s.date} ${s.time} (ID: ${s.id})`));
          }
        } else {
          Logger.warn("–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ —î –º–∞—Å–∏–≤–æ–º", data);
        }
        
        return data;
      } catch (parseError) {
        Logger.error(`–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –¥–ª—è ${queueId.slice(-8)}`, {
          error: parseError.message,
          response: text.slice(0, 200)
        });
        return null;
      }
    } catch (networkError) {
      Logger.error(`–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è ${queueId.slice(-8)}`, {
        error: networkError.message,
        retry: retryCount
      });
      
      if (retryCount < maxRetries) {
        const delayTime = baseDelay * Math.pow(2, retryCount);
        Logger.info(`–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delayTime}–º—Å`);
        await delay(delayTime);
        return await getSlots(queueId, date, retryCount + 1);
      }
      
      return null;
    }
  };

  const reserveSlot = async (queueId, slotId) => {
    Logger.info(`–°–ø—Ä–æ–±–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–ª–æ—Ç—É ${slotId} –≤ queue ${queueId.slice(-8)}`);
    
    try {
      const res = await fetch(`https://inpol.mazowieckie.pl/api/reservations/queue/${queueId}/reserve`, {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          "Accept": "application/json",
          "Origin": "https://inpol.mazowieckie.pl",
          "Referer": "https://inpol.mazowieckie.pl/"
        },
        body: JSON.stringify({
          queueId: queueId,
          slotId: slotId,
          name: userProfile.name,
          lastName: userProfile.lastName,
          dateOfBirth: userProfile.dateOfBirth
        })
      });
      
      const result = await res.json();
      
      if (res.ok) {
        Logger.success("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!", result);
        return { success: true, data: result };
      } else {
        Logger.error("–ü–æ–º–∏–ª–∫–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", result);
        return { success: false, error: result };
      }
      
    } catch (error) {
      Logger.error("–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ", error.message);
      throw error;
    }
  };

  const verifyCode = async (code) => {
    Logger.info(`–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è 2FA –∫–æ–¥—É: ${code}`);
    
    try {
      const res = await fetch("https://inpol.mazowieckie.pl/api/auth/twoFA/verify", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify({ twoFACode: code })
      });
      
      const result = await res.json();
      
      if (result.success) {
        Logger.success("2FA –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!");
      } else {
        Logger.error("2FA –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ–≤–¥–∞–ª–∞", result);
      }
      
      return result;
    } catch (error) {
      Logger.error("–ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó 2FA", error.message);
      throw error;
    }
  };

  const waitForCodeInput = () => {
    Logger.info("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ –≤–≤–æ–¥—É SMS –∫–æ–¥—É...");
    
    return new Promise(resolve => {
      const observer = new MutationObserver(() => {
        const input = document.querySelector('input[formcontrolname="code"]');
        if (input) {
          Logger.success("–§–æ—Ä–º–∞ –≤–≤–æ–¥—É SMS –∫–æ–¥—É –∑–Ω–∞–π–¥–µ–Ω–∞!");
          observer.disconnect();
          resolve();
        }
      });
      observer.observe(document.body, { childList: true, subtree: true });
      
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
      setTimeout(() => {
        observer.disconnect();
        Logger.warn("–¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ SMS –∫–æ–¥—É");
        resolve();
      }, 10000);
    });
  };

  // === –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ ===
  const maxCycles = 60;
  let successfulReservation = false;
  
  for (let cycle = 1; cycle <= maxCycles && !successfulReservation; cycle++) {
    Logger.info(`üîÅ –¶–∏–∫–ª ${cycle}/${maxCycles}`);
    
    let availableSlots = [];
    
    // –ó–±–∏—Ä–∞—î–º–æ —Å–ª–æ—Ç–∏ –∑ —É—Å—ñ—Ö —á–µ—Ä–≥
    for (const queueId of queueIds) {
      try {
        const slots = await getSlots(queueId, dateInput);
        
        if (slots && Array.isArray(slots) && slots.length > 0) {
          availableSlots.push(...slots.map(slot => ({ ...slot, queueId })));
          Logger.success(`–ó–Ω–∞–π–¥–µ–Ω–æ ${slots.length} —Å–ª–æ—Ç—ñ–≤ –≤ queue ${queueId.slice(-8)}`);
        }
        
        // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–æ —Ä—ñ–∑–Ω–∏—Ö —á–µ—Ä–≥
        await delay(1500);
        
      } catch (error) {
        Logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ queue ${queueId.slice(-8)}`, error.message);
      }
    }
    
    if (availableSlots.length === 0) {
      Logger.warn(`–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–∞ ${dateInput} –≤ —Ü–∏–∫–ª—ñ ${cycle}`);
      await delay(5000);
      continue;
    }
    
    // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä —Å–ª–æ—Ç—É
    const randomSlot = availableSlots[Math.floor(Math.random() * availableSlots.length)];
    Logger.info(`üéØ –û–±—Ä–∞–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å–ª–æ—Ç: ${randomSlot.date} ${randomSlot.time} –≤ queue ${randomSlot.queueId.slice(-8)}`);
    
    try {
      // –°–ø—Ä–æ–±–∞ –ø—Ä—è–º–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ API
      Logger.info("–°–ø—Ä–æ–±–∞ –ø—Ä—è–º–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ API...");
      const reserveResult = await reserveSlot(randomSlot.queueId, randomSlot.id);
      
      if (reserveResult && reserveResult.success) {
        Logger.success("üéâ –£–°–ü–Ü–®–ù–ï –ë–†–û–ù–Æ–í–ê–ù–ù–Ø!", {
          slot: `${randomSlot.date} ${randomSlot.time}`,
          queue: randomSlot.queueId.slice(-8),
          cycle: cycle,
          userProfile: userProfile
        });
        
        alert(`üéâ –£—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ —Å–ª–æ—Ç: ${randomSlot.date} ${randomSlot.time}`);
        successfulReservation = true;
        break;
      } else if (reserveResult && reserveResult.error && reserveResult.error.message?.includes('2FA')) {
        // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ 2FA –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        Logger.info("–ü–æ—Ç—Ä—ñ–±–Ω–∞ 2FA –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è");
        
        // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è SMS —Ñ–æ—Ä–º–∏
        await waitForCodeInput();
        
        // –ó–∞–ø–∏—Ç SMS –∫–æ–¥—É
        const smsCode = prompt("üì± –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ SMS:");
        if (!smsCode) {
          Logger.warn("SMS –∫–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ");
          continue;
        }
        
        // –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        const verifyResult = await verifyCode(smsCode);
        
        if (verifyResult && verifyResult.success) {
          // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
          const finalReserveResult = await reserveSlot(randomSlot.queueId, randomSlot.id);
          
          if (finalReserveResult && finalReserveResult.success) {
            Logger.success("üéâ –£–°–ü–Ü–®–ù–ï –ë–†–û–ù–Æ–í–ê–ù–ù–Ø –ü–Ü–°–õ–Ø 2FA!", {
              slot: `${randomSlot.date} ${randomSlot.time}`,
              queue: randomSlot.queueId.slice(-8),
              cycle: cycle
            });
            
            alert(`üéâ –£—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ —Å–ª–æ—Ç: ${randomSlot.date} ${randomSlot.time}`);
            successfulReservation = true;
            break;
          } else {
            Logger.error("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ–≤–¥–∞–ª–µ –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è 2FA", finalReserveResult);
          }
        } else {
          Logger.error("2FA –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ–≤–¥–∞–ª–∞", verifyResult);
        }
      } else {
        Logger.error("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ–≤–¥–∞–ª–µ", reserveResult);
      }
      
    } catch (error) {
      Logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ ${cycle}`, error.message);
    }
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏
    if (cycle < maxCycles) {
      Logger.info("–ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ü–∏–∫–ª–æ–º...");
      await delay(5000);
    }
  }
  
  if (!successfulReservation) {
    Logger.error(`üîö –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞—Ç–∏ —Å–ª–æ—Ç –ø—ñ—Å–ª—è ${maxCycles} —Ü–∏–∫–ª—ñ–≤`);
    alert("‚ùå –°–ª–æ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö —Å–ø—Ä–æ–±");
  }
  
  Logger.info("SlotHunter –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
}